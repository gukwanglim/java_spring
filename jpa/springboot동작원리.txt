1. 내장 톰켓을 가진다.
 톰켓을 따로 설치할 필요 없이 바로 실행가능하다.

 소켓(socket) : 운영체제가 가지고 있는 것.(A와 B가 서로 소통하기 위해 필요.)
    A가 소켓을 오픈한다면(5000번 포트) B는 'ip주소:5000'과 같은 형태로 A와 B가 서로 메시지를 주고 받을 수 있게 된다.
    하지만 이미 B가 5000번 포트를 가지고 A와 연결되어 있는 상태라면, C는 A와 연결될 수 없다.

    이러한 문제를 해결하기 위해 최초로 연결된 5000번 포트는 단순히 연결하는 역할만 한다. 만약, 5000번 포트를 통해 들어오게 된다면 5001번과 같은 새로운 포트를 만들어 연결된다.(이때 5000번 포트와의 연결은 끊긴다.)
    물론, 이렇게 새로운 소켓을 만들어 연결이 된다 하여도 계속해서 메시지를 주고 받고 있다면 다른 사용자의 요청을 받을 수 없다.(cpu가 일을 하고 있기 때문에)

    그렇기 때문에 새로운 5001번 포트를 만들었을 경우, 새로운 스레드를 같이 만들어낸다.(이렇게 새로운 스레드를 만드는 것은 메인 스레드(5000번 포트에 있다.)가 한다.)
    이러면 이미 메시지를 주고 받는 상황에서 다른 요청을 받을 수 있게 되고, 요청을 받으면 새로운 5002번 포트에 스레드2를 만들어 사용하게 된다.

    스레드는 동시 동작처럼 보이지만 time slice로 시간을 쪼개서 사용하는 것이다.
    이러한 통신을 소켓통신이라고 한다.

    하지만 소켓통신의 장점만 있는 것은 아니다. 단점으로는
        A에 B, C, ...가 연결되어 있으면 이 연결이 끊기지 않기 때문에 부하가 심해진다.
        그렇기 때문에 http 통신(문서를 전달하는 통신(소켓통신 기반이다.)))에서는 연결을 지속시키지 않고 끊어버리는 stateless 방식을 사용한다.
            이 방식은 B가 A에게 a.txt 파일을 요청하게 되면 A는 a.txt 파일을 B에게 전달한 뒤, 연결을 끊어버린다.
            (부하는 적지만 다시 연결하기 위해서는 항상 새로운 작업을 시작한다.(소켓통신의 경우에는 계속 연결되어 있는 상태이기 때문에 같은 작업을 반복할 필요가 없다.))
            이러한 단점을 보안하기 위해서 만들어진 것이 web 서버이다.

        쉽게 말해 http는 html이라는 확장자의 문서를 전달해주는 것이다.

    
 톰켓이란?
    http는 운영체제가 가지고 있는 소켓을 이용해서 만들어졌다. 프로그램이 운영체제가 가지고 있는 것을 활용하여 만든 것을 시스템콜이라고 부른다.

    톰켓을 알기 전에 웹서버에 대해 알아야한다.
        웹서버는 갑이다.(을이 필요한 데이터를 가지고 있기 때문에) 데이터 통신을 보면 을이 갑에게 요청(request)한다.
        request하기 위해서는 내 컴퓨터의 위치를 알아야하기 때문에 ip주소를 가지고 와야한다.
        또한, 요청한 자료가 무엇인지를 정확히 알아야하지 때문에 이러한 자료를 URL(자원을 요청하는 주소)으로 불러와야한다.
        이렇게 request를 하게되면 갑은 을에게 응답(response)하게 된다.
        (이 상황에서 보면 갑은 자료를 요청받기 전까지는 을의 주소를 모른다.(정확히는 알 필요가 없다.(요청할 때에만 응답하는 구조)))
        
        때문에 요청을 하지 않으면 갑은 을의 주소를 아예 모른다.
        그렇기에 사용하는 것이 소켓이다.

        이러한 자원을 static(정적) 자원이라고 부른다.

    이제 톰켓에 대해 알아보자.
        웹서버는 흔히 아파치를 많이 사용한다. 아파치는 컴퓨터의 특정 폴더를 지정하고 그것을 공유하게 된다.
        그렇기에 외부에서 요청이 들어오면 아파치는 지정된 폴더 안에 있는 자원을 응답하게 된다.

        만약, 이러한 아파치에 .JSP(혹은 java 코드)로 요청하게 된다면 java를 이해하지 못하기 때문에 응답하지 못한다.
        이러한 문제를 해결하기 위해서 아파치에 톰켓을 추가한다.
        톰켓을 추가한 상태에서 .JSP(혹은 java 코드)로 된 요청을 받게 되면 이것의 제어권을 톰켓이 넘겨받는다.
        그렇게 톰켓은 넘겨받은 .JSP(혹은 java 코드)를 컴파일하고 컴파일이 끝나면 그것을 .html 파일에 덮어씌운다.

        즉, 톰켓이 하는 행동은 java 파일을 컴파일하여 html 파일로 변환해주는 역할이다.
        그리고 다시 아파치에게 돌려주면 아파치는 해당 html을 응답해주는 방식이다.

    정리하자면 웹브라우저는 html, javascript, css, avi 등 정적인 파일만 응답해줄 수 있는데 만약, .JSP(혹은 java 코드)로 응답이 들어오게되면 톰켓을 통해 html 파일로 변환하여 응답하는 것이 웹서버이다.

2. 서블릿 컨테이너(톰켓)(사진 1번)(stateless)
 요청을 받는다고 하여 무조건 동작을 하는 것이 아니다.(이것은 스프링에서도 마찬가지이다.) 단지, 스프링은 일반적인 웹브라우저와 달리 정적 파일을 요청할 경우 작동하지 않는다.
    스프링은 URL(자원을 요청하는 주소)을 통하여 요청하는 방식을 막아놓았다. - URL은 http://naver.com/a.png와 같은 형식
    때문에 URI(식별자를 통해서 접근하는 방식)을 통하여 요청이 이뤄진다. - URI는 http://naver.com/picture/a와 같은 형식
    즉, 요청시에는 무조건 java를 이용해야한다.(특정한 파일 요청을 할 수 없다.)

 다시 사진 1번으로 돌아와 설명을 추가하자면 client가 request를 하게 되면(java와 관련) 서블릿 컨테이너(톰켓)가 생성된다. 
 최초의 요청을 받게 된다면 서블릿 컨테이너에 스레드가 하나 생성된다. 그리고 이렇게 생성된 스레드는 서블릿 객체(DB 연동과 같은 여러 역할 수행 후, html로 변환)를 만든다.
 물론, 다른 요청이 들어오게 되면 동시 처리(스레드2 생성)를 하게 된다.(이렇게 하는 이유는 처음 생성된 스레드에서 데이터를 가져올 때 3초가 걸린다면 새로운 요청일 들어왔을 때 3초의 딜레이가 생기는 것을 방지하기 위해서이다.)
 (당연하게 최적의 스레스 수를 정해서 만들어야한다.)

 만약, 총 스레드의 개수를 20개로 정했다면, 21개의 스레드가 요청을 받게 될 경우, 20번째 스레드까지 생성을 하고 마지막 21번째 스레드는 대기를 하게 된다.
 이 상황에서 첫 번째 스레드가 요청을 받아 응답을 완료하게 된다면 해당 스레드의 연결을 끊는 것이 아니라 21번째 스레드로 재사용을 하게 된다.(이러한 과정을 거치기 때문에 속도가 빠르다.)

3. web.xml
 3-1. ServletContext의 초기 파라미터
 3-2. Session의 유효시간 설정
 3-3. Servlet/JSP에 대한 정의
 3-4. Servlet/JSP 매핑
 3-5 Mime Type 매핑
 3-6. Welcome File list
 3-7. Error Pages 처리
 3-8. 리스너/필터 설정
 3-9. 보안

    3-1. 초기 파라미터는 한 번 설정해두면 어디서든 사용할 수 있다.(간단하게 예를 들자면 암구호 같은 역할을 한다.)
    3-2. session의 유효시간을 정하고 유효시간이 끝날 경우 제거, 하지만 session의 초기화를 요청하면 요효시간을 갱신할 수 있다.
    3-3, 4. 요청은 그것의 목적에 맞게 수행되어야 한다.(이때 들어오게된 요청은 자신의 목적이 기입되어 있다.)
    3-5. Mime Type은 요청의 데이터 타입을 말한다.(만약, 아무런 타입이 없다면 html의 get 방식을 사용(무엇인가를 제공하기 위한 것이 아닌 가지고 나가기 위한 방식(select)), 데이터 타입에 맞게 데이터를 가공하는 과정도 포함)
        만약, Mime Type이 틀리게 된다면 에러가 발생한다.
    3-6. 아무런 자료도 가지고 있지 않은 요청의 경우, Welcome File로 보내 처리.
    3-7. 이외의 다른 에러가 발생할 정보를 가지고 요청할 경우 Error Pages
    3-8. 리스너는 들어오는 요청이 특정한 조건을 만족하고 그것에 대응하는 권리를 가졌을 경우, web.xml의 권한을 무시하고 받아들이는 것을 말한다.

4. FrontController 패턴
 최초 앞단에서 request 요청을 받아서 필요한 클래스에 넘겨준다.(web.xml에 다 정의하기가 너무 힘들기 때문에.(Servlet/JSP 매핑의 양이 많아진다.))

 .do(특정주소)가 포함된 request를 받았을 경우, 이 요청이 URI 혹은 java 파일이면 톰켓으로 넘어가게 되고 톰켓에 존재하는 web.xml에 적혀있는 규칙에 의해 요청을 받게 된다.
 이때, 톰켓에는 request와 response라는 객체를 만든다.(여기서 requset는 요청한 사람의 정보를 가지고 있다.(요청한 사람이 어떠한 정보는 넘겼는지, 어떤 데이터를 들고 들어왔는지. 등등)))
 이런 requset를 가지고 response를 만든다.(객체를 만들 경우 '.변수'를 가지고 함수처럼 사용할 수 있게 된다.)

 하지만 이런 정보가 너무 많아지면 복잡해지기 마련이다. 그렇기 때문에 .do와 같은 특정주소가 포함된 요청을 받을 경우 FrontController로 넘어가도록 되어있다.
 이렇게 FrontController로 들어오게된 요청은 원하는 자료를 찾아갈 수 있게 다시 한번 requset를 한다.

 그런데 requset를 할 때, 스프링의 경우는 자원의 접근을 막아놓았다고 했다. 하지만 내부(아파치(웹서버))에서는 이런 접근이 가능하다.
 이 requset가 작동되면 처음 톰켓에서 만든 객체가 FrontController에서 만든 객체로 변경된다.
 여기서 원래의 요청은 새로운 요청이 들어올 때마다 톰켓의 requset가 새로 만들어지지만, FrontController으로 인해 새롭게 정의된 requset는 이전 톰켓에서 가지고 있던 requset를 삭제시키지 않고 유지하게 된다.
 (만약, 기존 톰켓에 있던 requset를 삭제하게 된다면 FrontController에 들어오기 이전의 기본적이 요청이 사라지는 것이기 때문이다. 이러한 과정을 requestDispatcher라고 한다.)

 이때 새로운 요청이 생기기 때문에 request와 response가 새롭게 new될 수 있다. 그래서 아래의 RequestDispatcher가 필요하다.

5. RequestDispatcher
 필요한 클래스 요청이 도달했을 때 FrontController에 도착한 request와 response를 그대로 유지시켜준다.

 쉽게 설명하자면 요청 A로 인해서 a.html의 화면을 브러우저에 띄우고, a.html에 존재하는 버튼을 눌러 b.html로 넘어갈 경우, 요청 A에 받게된 requset와 response가 b.html로 넘어갈 때 사라지는 것이 아니라 requestDispatcher를 통해 유지하는 것이다.
 (다음 페이지로 넘어갔다 하여 완전히 새로운 페이지가 시작되는 것이 아니라 이전 페이지에서 사용하던 데이터를 가지고 다음 페이지로 넘어가는 것이다.)

6. DispatcherServlet
 FrontController 패턴을 직접짜거나 RequestDispatcher를 직접구현할 필요가 없다. 왜냐하면 스프링에는 DispatcherServlet이 있기 때문이다. DispatcherServlet은 FrontController 패턴 + RequestDispatcher이다.

 DispatcherServlet이 자동생성되어 질 때 수 많은 객체가 생성(IoC)된다. 보통 필터들이다. 해당 필터들은 내가 직접 등록할 수 도 있고 기본적으로 필요한 필터들은 자동 등록 되어진다.