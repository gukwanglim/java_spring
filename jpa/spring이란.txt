1. 스프링이란?
    1-1. 스프링은 프레임워크이다.
    1-2. 스프링은 오픈소스이다.
    1-3. 스프링은 IoC 컨테이너를 가진다.
    1-4. 스프링은 DI 를 지원한다.
    1-5. 스프링은 엄청나게 많은 필터를 가지고 있다.
    1-6. 스프링은 엄청나게 많은 어노테이션을 가지고 있다. (리플렉션, 컴파일체킹)
    1-7. 스프링은 MessageConverter를 가지고 있다. 기본값은 현재 Json이다.
    1-8. 스프링은 BufferedReader와 BufferedWriter를 쉽게 사용할 수 있다.
    1-9. 스프링은 계속 발전중이다.

    1-1. 프레임워크란 풀어서 설명하자면 틀 안에서 동작한다는 뜻이다.
     이와  비슷한 개념인 라이브러리가 있는데 라이브러리는 프레임워크보다 더욱 자유롭게 사용이 가능하다.

    1-2. 오픈소스는 말 그대로 소스를 공개한다는 뜻이다. 즉, 코드의 내부를 공개하고 다른 사람들이 사용하게 될 경, 그것을 고쳐서 사용할 수 있다는 말이다.

    1-3. IoC(Inversion Of Controll, 제어의 역전(주도권은 스프링에 있다.))는 스프링의 핵심이다.
     class는 설계도, object는 실체화가 가능한 것(abstact class는 추상적인 class이므로 실체화가 가능한 object가 올 수 없다.), instance는 실체화 된 것을 의미한다.
     (예를 들자면 '가구'는 추상적인 것이다.(실체화 불가능) 실체화가 가능한 것(object)은 '가구'라는 카테고리에 존재하는 '의자', '책상' 등이 된다. 이렇게 존재하다가 실제 우리 집에 '의자', '책상'을
      설치하게 된다면 그제야 실체화(instance)가 되었다고 말할 수 있다.) 

    IoC는 스프링이 주도권을 갖게 되는 것이라고 말했다.
    반대로 사용자가 주도권을 갖는다는 말은 object를 new를 사용하여 heap이라는 메모리 공간에 올리는 것을 말한다.
    즉, 의자 s = new 의자(); 라는 코드를 만들었을 때, heap 안에 '의자'라는 이름이 들어간 주소 's'가 담기게 된다.
     이 's'는 new를 만든 메서드에서 관리한다.

     코드를 가지고 예를 들자면 public void make() { 의자 s = new 의자() }를 한다면 make()라는 메소드에서 heap에 저장된 주소('s')를 관리하며,
     새로운 메소드 public void use() 가 만들어지고 똑같이 { 의자 s = new 의자() }를 적성한다 하여도 use() 메소드에서 's'를 호출하여도 make()에서 만든 's'를 불러올 수 없다.
     만약, use()에서 make()의 's'를 넘겨받고 싶다면 코드가 복잡해질 것이다.

    이 문제를 해결하기 위해서 스프링은 IoC를 제공한다.
     IoC는 class로 만들어 놓은 object를 스캔하여 heap 메모리에 자동으로 저장하는 것이다. 즉, 다른 메소드에 저장된 값을 가져오기 위해 필요한 복잡한 코드를 자동으로 만들어 준다고 생각하면 편하다.

    1-4. DI(Dependency Injection)는 개발자가 new를 사용하여 객체의 주소를 원하는 곳에서 관리했는데 IoC로 인해 스프링이 관리하게 되었기 때문에 내가 원하는 class의 메소드에 가져가 사용하는 것을 말한다.   