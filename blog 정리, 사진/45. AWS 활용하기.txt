1. AWS에 blog 프로젝트를 올리기 위해서 EC2 인스턴스를 실행하여 ubuntu 20.04LTS 버전을 설치하고(사진 8번), 사진 9번과 같이 설정 한다.(여기서 위치 무관으로 하여도 상관 없을 것 같지만 일단 개인 주소를 사용했다.)

2. 인스턴스를 생성하게 되면 사진 10번과 같이 실행 중인 서버를 볼 수 있다.

3. 필수는 아니지만, 탄력적 IP 주소를 받아 연결할 수 있다.(사진 11번)

4. 인스턴스를 확인해보면 탄력적 IP 주소를 받을 것을 볼 수 있으며, 퍼블릭 IPv4 주소는 공적으로 사용할 수 있는 주소를 뜻하며, 프라이빗 IPv4 주소는 개인 주소로 사용된다.
    (캡쳐를 하지 못했는데, 키 페어를 생성하여 .pem 파일로 저장하여 이것을 가지고 인증을 받아 서버를 실행할 수 있게 된다.)

5. 원격 접속을 위해 putty를 설치하고 퍼블릭 IPv4 주소를 가져와 putty를 실행한다.(이때, save를 하게 되면 언제든 쉽게 load를 할 수 있게 된다.) (사진 13번)    
    (하지만 퍼블릭 IPv4 주소만 가지고는 접속할 수 없다. 위에서 만들었던 .pem 파일을 key로 사용해야 한다.(사진 14번))

6. putty를 실행해보니 사진 15번과 같은 에러 메시지를 만났다. 이것은 shh의 설치에 관련된 문제일 가능성이 크다.
    또한, 현재 사용하는 windows에는 리눅스(우분투)가 존재하지 않다보니 발생한 문제이다. 때문에 ubuntu를 설치해야 한다.

7. 우분투를 실행하기 위해서 WSL2를 설치한다.
    WSL2는 Window Subsystem for Linux2의 줄임말로서 가상화를 통해 윈도우에서 리눅스를 구현할 수 있게 해주는 기능이다. 
    VMware 같이 가상 컴퓨터로 분할할 수 있는 개념으로써 이제 윈도우에서도 리눅스 개발환경을 꾸밀 수 있게 도와준다.

    먼저, 관리자 권한으로 터미널을 실행한 후, 
        dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
        dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
    명령어를 입력하여 Linux용 윈도우 하위 시스템 옵션 기능 사용 및 Virtual Machine 플랫폼 옵션 기능을 사용을 할 수 있도록 설정한다.(사진 16번)

    명령어를 모두 입력했으면 윈도우 설정을 위해 재부팅한다.

8. 스토어에서 Ubuntu를 다운 받는다.(사진 17번) 이전에 리눅스를 먼저 설치해야 하는데 설치 방법은 
    제어판 - 프로그램 및 기능 - Windows 기능 켜기/끄기 - Linux용 Windows 하위 시스템 선택 - 확인 을 선택한다.(사진 18번)
    
    다음으로 
    설정 - 업데이트 및 보안 - 개발자용 - 개발자 모드 켬 - 컴퓨터 재시작 을 진행한다.(사진 19번)

    업데이트 확인 (사진 20번) 추가로 설정 - Windows 업데이트 - 고급 옵션 - Window를 업데이트할 때 다른 Microsoft 제품에 대한 업데이트 받기 활성화 (사진 21번)

9. powershell 관리자 권한으로 실행하여 명령어 작성(사진 22번) 
    dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart  (WSL 시스템을 활성화)
    dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart  (Virtual Machine 기능을 활성화)

10. Linux 커널 업데이트 패키지 다운 (사진 23번)

11. WSL2 기본 버전 세팅 (사진 24번)
    wsl --set-default-version 2 (기본 버전 세팅)

12. 우분투 실행
    이제 Ubuntu를 실행해보면 사진 25번과 같이 사용자 계정과 암호를 만들어야 한다.
    (계정 : kwang, 암호 : as123 으로 설정했다.)

    설정이 모두 완료되면 사진 26번과 같은 창을 확인할 수 있다.

    * 추가로 wsl을 vscode와 연동시키기 위해서는 command에 code. 명령어를 실행하고, vscode에서 ctrl+shift+p를 눌러 Remote-WSL: New WSL Window를 실행해주면 된다.
    (사진 34번, 출처 : https://ingu627.github.io/tips/install_ubuntu/#google_vignette)

13. 터미널에 우분투 연결하기
    지금까지는 Window에 Linux와 Ubuntu를 설치하는 과정을 마쳤으니 쉽게 Ubuntu를 사용하기 위해 터미널에 연결시키도록 한다.

    먼저, 터미널을 WSL1에서 WSL2로 변경하기 위해 관리자 권한으로 실행 후,

        wsl -l -v 를 사용하여 WSL 버전을 확인한다. (사진 27번)

        현재 WSL2 버전임을 확인할 수 있다.

        만약, WSL1 일 경우에는 wsl --set-version Ubuntu-20.04 2 를 사용하여 버전을 변경해준다.

    wsl을 작성했을 때, 사진 28번과 같이 나오게 된다면 정상적으로 설치가 완료된 것이다.

    이제 터미널에 Ubuntu를 세팅하기 위해 사진 29번과 같이 터미널 상단 화살표를 클릭하여 우분투를 실행한다. (사진 29번)

    정상적으로 세팅이 완료되면 사진 30번과 같이 실행되는 것을 확인할 수 있다.

14. 우분투 업데이트
    Ubuntu 업데이트를 위해 sudo apt-get update 를 입력하고 password를 작성하고 다시 sudo apt-get upgrade 를 입력한다. (사진 31, 32번)

    sudo는 관리자 권한 apt-get 명령어는 마이크로소프트 스토어 리눅스 버전이라 생각하면 편하다. 저 명령어를 통해 인터넷만 연결되어 있다면 리눅스 서버에 저장된 앱이나 업데이트를 받을 수 있다    .

    위 과정을 끝내고 다시 putty를 실행해보면 아직도 사진 33번과 같이 에러가 발생하는 것을 확인할 수 있다.
    이 문제를 해결하기 위해서 shh를 설치하도록 한다.

15. ssh 설치
    https://sosal.kr/m/1042 에서 확인해보면 Virtualbox를 사용하는 것을 볼 수 있다. 
    하지만 위 과정은 Virtualbox를 사용하지 않고 리눅스를 설치했다. 

    아직 리눅스의 개념이 완전한 것이 아니므로 Virtualbox를 이용하여 다시 실행하도록 한다.

    Virtualbox를 설치한다.(windows 환경이므로 Windows hosts로 실행한다.) (사진 35, 36번)

    Virtualbox의 형태는 사진 37번과 같다.


    리눅스 설치를 위해 http://releases.ubuntu.com/focal/ 에서 우분투 이미지 파일(iso)을 설치한다. 
    하지만 iso 파일이 너무 커서 일단 설치된 Ubuntu를 활용하여 ssh를 설치해보도록 한다.

16. ssh 설치(Virtualbox 사용하지 않음)
    터미널에서 sudo apt update를 실행한다.(사진 39번)

    ssh를 설치하기 위해 sudo apt install openssh-server를 실행한다. (사진 40번)

    하지만 사진 41번의 문제를 해결하지 못하겠다.

17. 그러므로 Virtualbox를 사용하는 것으로 돌아간다.
    우선, 기본적이 설정만 진행하도록 한다.

    노트북의 Ram은 8GB로 메모리의 크기는 2GB 정도로 결정한다.
    크기는 적당히 20GB로 결정한다.